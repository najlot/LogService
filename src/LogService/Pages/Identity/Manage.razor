@page "/Manage"

@using System.ComponentModel.DataAnnotations;
@using LogService.Identity;
@using LogService.Localisation;
@using LogService.Services;
@using LogService.Identity
@using LogService.Services

@inject IAuthenticationService AuthenticationService
@inject IUserService UserService
@inject ILogger<Manage> Logger
@inject NavigationManager NavigationManager

<PageTitle>@CommonLoc.UserNamagement</PageTitle>

<div>
	<EditForm Model="@Input" OnValidSubmit="@SavePassword">
		<section class="w-100 p-4 d-flex justify-content-center pb-4">
			<div>
				<h1>@CommonLoc.UserNamagement</h1>
				<br />
				<DataAnnotationsValidator />
				<ValidationSummary />

				<!-- New password input -->
				<div class="mb-4">
					<label class="form-label" for="PasswordInput">@CommonLoc.NewPassword</label>
					<InputText type="password" id="PasswordInput" class="form-control" @bind-Value="Input.Password" />
				</div>

				<!-- New password confirm input -->
				<div class="mb-4">
					<label class="form-label" for="PasswordConfirm">@CommonLoc.ConfirmNewPassword</label>
					<InputText type="password" id="PasswordConfirm" class="form-control" @bind-Value="Input.PasswordConfirm" />
				</div>

				<div class="mb-4">
					<button type="submit" class="btn btn-primary w-100">@CommonLoc.ChangePassword</button>
				</div>
			</div>
		</section>
	</EditForm>
</div>

@code {
	private class InputModel
	{
		[Required]
		[DataType(DataType.Password)]
		[StringLength(30, MinimumLength = 8)]
		public string Password { get; set; } = string.Empty;

		[Required]
		[DataType(DataType.Password)]
		[StringLength(30, MinimumLength = 8)]
		public string PasswordConfirm { get; set; } = string.Empty;
	}

	private InputModel Input = new();

	[CascadingParameter(Name = "ErrorService")]
	protected IErrorService? ErrorService { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		ErrorService?.HideError();
		
		var state = await AuthenticationService.GetAuthenticationStateAsync();
		if (state.User.Identity is null)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
			return;
		}
	}

	private async Task SavePassword()
	{
		if (Input.Password != Input.PasswordConfirm)
		{
			ErrorService?.ShowError("Manage", "Passwords do not match.");
			Input.PasswordConfirm = "";
			return;
		}

		try
		{
			var state = await AuthenticationService.GetAuthenticationStateAsync();
			if (state.User.Identity is null)
			{
				var url = NavigationManager.BuildReturnUrl("/login");
				NavigationManager.NavigateTo(url);
				return;
			}

			var user = await UserService.GetCurrentUserAsync();
			await UserService.UpdateItemAsync(user, Input.Password);

			Input.Password = "";
			Input.PasswordConfirm = "";

			ErrorService?.HideError();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "Error updating user.");
			ErrorService?.ShowError("Login", "Could update user data. Server error.");
		}
	}
}