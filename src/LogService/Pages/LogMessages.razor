@page "/logmessages"
@using LogService.Identity;
@using LogService.Localisation;
@using LogService.Model;
@using LogService.Services;
@using LogService.Contracts.Events;
@using LogService.Identity
@using LogService.Model
@using LogService.Services
@using Microsoft.Extensions.Localization;
@inject ILogger<LogMessages> Log
@inject Najlot.Map.IMap Map
@inject ILogMessageService LogMessageService
@inject IMessenger Messenger
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<LogLevelLoc> LogLevelLocalizer

@implements IDisposable

<PageTitle>@LogMessageLoc.LogMessages</PageTitle>

@if (isLoading)
{
	<p><em>@CommonLoc.Loading...</em></p>
}
else
{
	@if (ShowFilter)
	{
		<div class="border border-dark mb-4 p-1">
			<div class="row mb-1">
				<div>
					<button @onclick="() => ShowFilter = false" type="button" class="btn btn-secondary mb-2 w-100">
						<div class="row">
							<div class="col-10">
								<div class="d-flex">
									Filter
								</div>
							</div>
							<div class="col-2">
								<div class="d-flex justify-content-end">
									<i class="oi oi-caret-top"></i>
								</div>
							</div>
						</div>
					</button>
				</div>

				<!-- DateTime -->
				<div class="col-4 col-xl-2 mt-1">
					<label class="form-label ms-1 ms-xl-0">@LogMessageLoc.DateTime</label>
				</div>

				<div class="col-xl-4">
					<div class="d-flex mb-1">
						<InputDate class="form-control" @bind-Value="Filter.DateTimeFrom" />
						-
						<InputDate class="form-control" @bind-Value="Filter.DateTimeTo" />
					</div>
				</div>

				<!-- LogLevel -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">Min. @LogMessageLoc.LogLevel</label>
				</div>

				<div class="col-8 col-xl-4">
					<div class="d-flex">
						<InputSelect id="StatusInput" class="form-control" @bind-Value="Filter.LogLevel">
							@foreach (var value in Enum.GetValues(typeof(Contracts.LogLevel)))
							{
								<option value="@value">@LogLevelLocalizer[$"{@value}"]</option>
							}
						</InputSelect>
					</div>
				</div>

				<!-- Source -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Source</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Source" />
					</div>
				</div>

				<!-- Category -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Category</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Category" />
					</div>
				</div>

				<!-- State -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.State</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.State" />
					</div>
				</div>

				<!-- Exception -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Exception</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Exception" />
					</div>
				</div>

				<!-- Message -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Message</label>
				</div>

				<div class="col-8 col-xl-4">
					<div class="">
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Message" />
					</div>
				</div>

				<!-- RawMessage -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.RawMessage</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.RawMessage" />
					</div>
				</div>

				<!-- Search -->
				<div class="col">
					<div class="d-flex justify-content-end">
						<button @onclick="SearchWithFilter" type="button" class="btn btn-success mt-1">
							<i class="oi oi-magnifying-glass"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<div>
			<button @onclick="() => ShowFilter = true" type="button" class="btn btn-secondary mb-2 w-100">
				<div class="row">
					<div class="col-10">
						<div class="d-flex">
							Filter
						</div>
					</div>
					<div class="col-2">
						<div class="d-flex justify-content-end">
							<i class="oi oi-caret-bottom"></i>
						</div>
					</div>
				</div>
			</button>
		</div>
	}

	<div class="row border-bottom">
		<div class="col-6 col-xl-2 fw-bold">
			@LogMessageLoc.DateTime
		</div>
		<div class="col-6 col-xl-1 fw-bold">
			@LogMessageLoc.LogLevel
		</div>
		<div class="col-xl-9 fw-bold">
			@LogMessageLoc.Message
		</div>
	</div>

	@foreach (var logMessage in GetLogMessages())
	{
		<div class="row border-bottom border-dark">
			<div class="col-6 col-xl-2">
				<a href="/LogMessage/@logMessage.Id"
				   @onclick="(e) => OpenLogMessageModal(e, logMessage.Id)"
				   @onclick:preventDefault="true"
				   class="nav-link text-break">
					@logMessage.DateTime
				</a>
			</div>
			<div class="col-6 col-xl-1">
				<a href="/LogMessage/@logMessage.Id"
				   @onclick="(e) => OpenLogMessageModal(e, logMessage.Id)"
				   @onclick:preventDefault="true"
				   class="nav-link text-break">
					@logMessage.LogLevel
				</a>
			</div>
			<div class="nav-item col-xl-9">
				<a href="/LogMessage/@logMessage.Id"
				   @onclick="(e) => OpenLogMessageModal(e, logMessage.Id)"
				   @onclick:preventDefault="true"
				   class="nav-link text-break">
					@logMessage.Message
				</a>
			</div>
		</div>
	}

	<!-- Modal Dialog -->
	<div class="modal fade @(_showModal ? "show" : "")"
		 style="display:@(_showModal ? "block" : "none")"
		 tabindex="-1" role="dialog" aria-modal="true">
		<div class="modal-dialog modal-fullscreen" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@LogMessageLoc.LogMessage</h5>
					<button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					@if (_selectedLogMessageId != null)
					{
						<LogMessage Id="@_selectedLogMessageId.Value" />
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
				</div>
			</div>
		</div>
	</div>
	@if (_showModal)
	{
		<div class="modal-backdrop fade show"></div>
	}
}

@code {
	[CascadingParameter(Name = "ErrorService")]
	protected IErrorService? ErrorService { get; set; }

	private List<LogMessageListItemModel> logMessages = [];
	private bool isLoading = true;
	private bool _showModal = false;
	private Guid? _selectedLogMessageId;

	private Guid currentUserId;

	private LogMessageListItemModel[] GetLogMessages()
	{
		lock (logMessages)
		{
			return logMessages.ToArray();
		}
	}

	private Contracts.Filters.LogMessageFilter Filter = new();
	private bool ShowFilter;
	private bool isFilterActive = false;

	private void OpenLogMessageModal(MouseEventArgs e, Guid id)
	{
		// Only open modal for left-click without modifiers
		if (e.Button == 0 && !e.CtrlKey && !e.ShiftKey && !e.AltKey)
		{
			_selectedLogMessageId = id;
			_showModal = true;
			StateHasChanged();
		}
		// Otherwise, let browser handle (middle/right click, ctrl+click, etc.)
	}

	private void CloseModal()
	{
		_showModal = false;
		_selectedLogMessageId = null;
	}

	private string LimitDisplayLength(string? value, int maxLength)
	{
		if (maxLength < 3) throw new InvalidOperationException("MaxLength must be greater than 3");
		if (string.IsNullOrWhiteSpace(value)) return "";
		if (value.Length <= maxLength) return value;
		return value.Substring(0, maxLength - 3) + "...";
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var state = await AuthenticationService.GetAuthenticationStateAsync();
			if (state.User.Identity is null)
			{
				var url = NavigationManager.BuildReturnUrl("/login");
				NavigationManager.NavigateTo(url);
				return;
			}

			currentUserId = await AuthenticationService.GetUserIdAsync();

			isLoading = true;
			var messages = await LogMessageService.GetItemsAsync();

			lock (logMessages)
			{
				logMessages.Clear();
				logMessages.AddRange(messages);
			}

			isFilterActive = false;
			Messenger.Register<List<LogMessageCreated>>(Handle);
		}
		catch (System.Security.Authentication.AuthenticationException)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
		}
		catch (Exception ex)
		{
			Log.LogError(ex, "Error loading logmessages.");
			ErrorService?.ShowError("Error", "Could not load. Server error.");
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task SearchWithFilter()
	{
		isLoading = true;

		var messages = await LogMessageService.GetItemsAsync(Filter);

		lock (logMessages)
		{
			logMessages.Clear();
			logMessages.AddRange(messages);
		}

		isFilterActive = true;
		isLoading = false;
	}

	private async Task Handle(List<LogMessageCreated> messages)
	{
		var filteredMessages = messages.Where(m => m.CreatedBy == currentUserId);

		// Apply filter if active
		if (isFilterActive)
		{
			filteredMessages = filteredMessages.Where(MatchesFilter);
		}

		var items = Map
			.From<LogMessageCreated>(filteredMessages)
			.ToArray<LogMessageListItemModel>();

		if (items.Length == 0)
		{
			return;
		}

		lock (logMessages)
		{
			logMessages.InsertRange(0, items);
		}
		
		await InvokeAsync(StateHasChanged);
	}

	private bool MatchesFilter(LogMessageCreated message)
	{
		if (Filter.DateTimeFrom != null && message.DateTime < Filter.DateTimeFrom)
			return false;
		if (Filter.DateTimeTo != null && message.DateTime > Filter.DateTimeTo)
			return false;
		if (Filter.LogLevel != null && message.LogLevel < Filter.LogLevel)
			return false;
		if (!string.IsNullOrEmpty(Filter.Category) && !message.Category.Contains(Filter.Category))
			return false;
		if (!string.IsNullOrEmpty(Filter.State) && !message.State.Contains(Filter.State))
			return false;
		if (!string.IsNullOrEmpty(Filter.Source) && !message.Source.Contains(Filter.Source))
			return false;
		if (!string.IsNullOrEmpty(Filter.RawMessage) && !message.RawMessage.Contains(Filter.RawMessage))
			return false;
		if (!string.IsNullOrEmpty(Filter.Message) && !message.Message.Contains(Filter.Message))
			return false;
		if (!string.IsNullOrEmpty(Filter.Exception) && !message.Exception.Contains(Filter.Exception))
			return false;
		if (Filter.ExceptionIsValid != null && message.ExceptionIsValid != Filter.ExceptionIsValid)
			return false;

		return true;
	}

	public void Dispose() => Messenger.Unregister(this);
}
