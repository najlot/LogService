@page "/logmessages"
@using Cosei.Client.Base;
@using Cosei.Client.Http;
@using Microsoft.Extensions.Localization;
@using LogService.Blazor.Identity;
@using LogService.Blazor.Services;
@using LogService.Client.Data.Models;
@using LogService.Client.Data.Services;
@using LogService.Client.Data;
@using LogService.Client.Localisation;
@using LogService.Contracts.Events;
@inject ILogger<LogMessages> Log
@inject Najlot.Map.IMap Map
@inject ILogMessageService LogMessageService
@inject ISubscriberProvider SubscriberProvider
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>@LogMessageLoc.LogMessages</PageTitle>

@if (logMessages == null)
{
	<p><em>@CommonLoc.Loading...</em></p>
}
else
{
	<table class="table table-sm table-striped">
		<thead>
			<tr>
				<th>@LogMessageLoc.DateTime</th>
				<th>@LogMessageLoc.LogLevel</th>
				<th><a href="/LogMessage/@Guid.Empty" class="btn btn-success w-100">@CommonLoc.New</a></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var logMessage in logMessages)
			{
				<tr scope="row">
					<td class="text-break">@logMessage.DateTime</td>
					<td class="text-break">@logMessage.LogLevel</td>
					<td><a href="/LogMessage/@logMessage.Id" class="btn btn-primary w-100">@CommonLoc.Edit</a></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[CascadingParameter(Name = "ErrorService")]
	protected IErrorService? ErrorService { get; set; }

	private List<LogMessageListItemModel>? logMessages;

	private ISubscriber? Subscriber;

	private string LimitDisplayLength(string? value, int maxLength)
	{
		if (maxLength < 3) throw new InvalidOperationException("MaxLength must be greater than 3");
		if (string.IsNullOrWhiteSpace(value)) return "";
		if (value.Length <= maxLength) return value;
		return value.Substring(0, maxLength - 3) + "...";
	}

	protected override async Task OnInitializedAsync()
	{
		var state = await AuthenticationService.GetAuthenticationStateAsync();

		if (state.User.Identity is null)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
			return;
		}

		try
		{
			logMessages = new List<LogMessageListItemModel>(await LogMessageService.GetItemsAsync());

			Subscriber = await SubscriberProvider.GetSubscriber();

			Subscriber.Register<LogMessageCreated>(Handle);
			Subscriber.Register<LogMessageUpdated>(Handle);
			Subscriber.Register<LogMessageDeleted>(Handle);

			await Subscriber.StartAsync();
		}
		catch (System.Security.Authentication.AuthenticationException)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
		}
		catch (Exception ex)
		{
			Log.LogError(ex, "Error loading logmessages.");
			ErrorService?.ShowError("Error", "Could not load. Server error.");
		}
	}

	private async Task Handle(LogMessageCreated message)
	{
		if (logMessages is null)
		{
			return;
		}

		var item = Map.From(message).To<LogMessageListItemModel>();

		logMessages.Insert(0, item);

		await InvokeAsync(StateHasChanged);
	}

	private async Task Handle(LogMessageUpdated message)
	{
		if (logMessages is null)
		{
			return;
		}

		var entry = logMessages.FirstOrDefault(t => t.Id == message.Id);

		if (entry is not null)
		{
			Map.From(message).To(entry);
		}

		await InvokeAsync(StateHasChanged);
	}

	private async Task Handle(LogMessageDeleted message)
	{
		if (logMessages is null)
		{
			return;
		}

		var entry = logMessages.FirstOrDefault(t => t.Id == message.Id);

		if (entry is null)
		{
			return;
		}

		logMessages.Remove(entry);

		await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		Subscriber?.Unregister(this);
	}
}
