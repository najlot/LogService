@page "/logmessages"
@using System;
@using Cosei.Client.Base;
@using Cosei.Client.Http;
@using Microsoft.Extensions.Localization;
@using LogService.Blazor.Identity;
@using LogService.Blazor.Services;
@using LogService.Client.Data.Models;
@using LogService.Client.Data.Services;
@using LogService.Client.Data;
@using LogService.Client.Localisation;
@using LogService.Contracts.Events;
@inject ILogger<LogMessages> Log
@inject Najlot.Map.IMap Map
@inject ILogMessageService LogMessageService
@inject ISubscriberProvider SubscriberProvider
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<LogLevelLoc> LogLevelLocalizer

@implements IDisposable

<PageTitle>@LogMessageLoc.LogMessages</PageTitle>

@if (isLoading)
{
	<p><em>@CommonLoc.Loading...</em></p>
}
else
{
	@if (ShowFilter)
	{
		<div class="border border-dark mb-4 p-1">
			<div class="row mb-1">
				<div>
					<button @onclick="() => ShowFilter = false" type="button" class="btn btn-secondary mb-2 w-100">
						<div class="row">
							<div class="col-10">
								<div class="d-flex">
									Filter
								</div>
							</div>
							<div class="col-2">
								<div class="d-flex justify-content-end">
									<i class="oi oi-caret-top"></i>
								</div>
							</div>
						</div>
					</button>
				</div>

				<!-- DateTime -->
				<div class="col-4 col-xl-2 mt-1">
					<label class="form-label ms-1 ms-xl-0">@LogMessageLoc.DateTime</label>
				</div>

				<div class="col-xl-4">
					<div class="d-flex mb-1">
						<InputDate class="form-control" @bind-Value="Filter.DateTimeFrom" />
						-
						<InputDate class="form-control" @bind-Value="Filter.DateTimeTo" />
					</div>
				</div>

				<!-- LogLevel -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">Min. @LogMessageLoc.LogLevel</label>
				</div>

				<div class="col-8 col-xl-4">
					<div class="d-flex">
						<InputSelect id="StatusInput" class="form-control" @bind-Value="Filter.LogLevel">
							@foreach (var value in Enum.GetValues(typeof(Contracts.LogLevel)))
							{
								<option value="@value">@LogLevelLocalizer[$"{@value}"]</option>
							}
						</InputSelect>
					</div>
				</div>

				<!-- Source -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Source</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Source" />
					</div>
				</div>

				<!-- Category -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Category</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Category" />
					</div>
				</div>

				<!-- State -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.State</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.State" />
					</div>
				</div>

				<!-- Exception -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Exception</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Exception" />
					</div>
				</div>

				<!-- Message -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.Message</label>
				</div>

				<div class="col-8 col-xl-4">
					<div class="">
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.Message" />
					</div>
				</div>

				<!-- RawMessage -->
				<div class="col-4 col-xl-2">
					<label class="form-label mt-1 ms-1 ms-xl-0">@LogMessageLoc.RawMessage</label>
				</div>

				<div class="col-8 col-xl-4">
					<div>
						<InputText class="form-control mt-1" type="text" @bind-Value="Filter.RawMessage" />
					</div>
				</div>

				<!-- Search -->
				<div class="col">
					<div class="d-flex justify-content-end">
						<button @onclick="SearchWithFilter" type="button" class="btn btn-success mt-1">
							<i class="oi oi-magnifying-glass"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
	}
	else
	{
		<div>
			<button @onclick="() => ShowFilter = true" type="button" class="btn btn-secondary mb-2 w-100">
				<div class="row">
					<div class="col-10">
						<div class="d-flex">
							Filter
						</div>
					</div>
					<div class="col-2">
						<div class="d-flex justify-content-end">
							<i class="oi oi-caret-bottom"></i>
						</div>
					</div>
				</div>
			</button>
		</div>
	}

	<div class="row border-bottom">
		<div class="col-6 col-xl-2 fw-bold">
			@LogMessageLoc.DateTime
		</div>
		<div class="col-6 col-xl-1 fw-bold">
			@LogMessageLoc.LogLevel
		</div>
		<div class="col-xl-9 fw-bold">
			@LogMessageLoc.Message
		</div>
	</div>

	@foreach (var logMessage in GetLogMessages())
	{
		<div class="row border-bottom border-dark">
			<div class="col-6 col-xl-2">
				<a href="/LogMessage/@logMessage.Id" class="nav-link text-break">
					@logMessage.DateTime
				</a>
			</div>
			<div class="col-6 col-xl-1">
				<a href="/LogMessage/@logMessage.Id" class="nav-link text-break">
					@logMessage.LogLevel
				</a>
			</div>
			<div class="nav-item col-xl-9">
				<a href="/LogMessage/@logMessage.Id" class="nav-link text-break">
					@logMessage.Message
				</a>
			</div>
		</div>
	}
}

@code {
	[CascadingParameter(Name = "ErrorService")]
	protected IErrorService? ErrorService { get; set; }

	private List<LogMessageListItemModel> logMessages = [];
	private bool isLoading = true;

	private LogMessageListItemModel[] GetLogMessages()
	{
		if (logMessages is null)
		{
			return Array.Empty<LogMessageListItemModel>();
		}

		lock (logMessages)
		{
			var messages = logMessages.ToArray();
			return messages;
		}
	}

	private Contracts.Filters.LogMessageFilter Filter = new();
	private bool ShowFilter;

	private ISubscriber? Subscriber;

	private string LimitDisplayLength(string? value, int maxLength)
	{
		if (maxLength < 3) throw new InvalidOperationException("MaxLength must be greater than 3");
		if (string.IsNullOrWhiteSpace(value)) return "";
		if (value.Length <= maxLength) return value;
		return value.Substring(0, maxLength - 3) + "...";
	}

	protected override async Task OnInitializedAsync()
	{
		var state = await AuthenticationService.GetAuthenticationStateAsync();

		if (state.User.Identity is null)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
			return;
		}

		try
		{
			isLoading = true;
			var messages = await LogMessageService.GetItemsAsync();

			lock (logMessages)
			{
				logMessages.Clear();
				logMessages.AddRange(messages);
			}

			Subscriber = await SubscriberProvider.GetSubscriber();

			Subscriber.Register<List<LogMessageCreated>>(Handle);
			Subscriber.Register<List<LogMessageUpdated>>(HandleUpdated);

			await Subscriber.StartAsync();
		}
		catch (System.Security.Authentication.AuthenticationException)
		{
			var url = NavigationManager.BuildReturnUrl("/login");
			NavigationManager.NavigateTo(url);
		}
		catch (Exception ex)
		{
			Log.LogError(ex, "Error loading logmessages.");
			ErrorService?.ShowError("Error", "Could not load. Server error.");
		}
		finally
		{
			isLoading = false;
		}
	}

	private async Task SearchWithFilter()
	{
		isLoading = true;

		var messages = await LogMessageService.GetItemsAsync(Filter);

		lock (logMessages)
		{
			logMessages.Clear();
			logMessages.AddRange(messages);
		}

		isLoading = false;
	}

	private async Task Handle(List<LogMessageCreated> messages)
	{
		// Filter messages based on current filter settings
		var filteredMessages = messages.Where(m => ShouldIncludeMessage(m.DateTime, m.LogLevel, m.Category, m.State, m.Source, m.RawMessage, m.Message, m.Exception, m.ExceptionIsValid)).ToList();
		
		var items = Map.From<LogMessageCreated>(filteredMessages).ToArray<LogMessageListItemModel>();

		lock (logMessages)
		{
			logMessages.InsertRange(0, items);
		}
		
		await InvokeAsync(StateHasChanged);
	}

	private async Task HandleUpdated(List<LogMessageUpdated> messages)
	{
		lock (logMessages)
		{
			foreach (var message in messages)
			{
				// Remove existing item if it exists
				var existingItem = logMessages.FirstOrDefault(i => i.Id == message.Id);
				if (existingItem != null)
				{
					logMessages.Remove(existingItem);
				}

				// Add updated item if it passes the filter
				if (ShouldIncludeMessage(message.DateTime, message.LogLevel, message.Category, message.State, message.Source, message.RawMessage, message.Message, message.Exception, message.ExceptionIsValid))
				{
					var updatedItem = Map.From(message).To<LogMessageListItemModel>();
					logMessages.Insert(0, updatedItem);
				}
			}
		}
		
		await InvokeAsync(StateHasChanged);
	}

	private bool ShouldIncludeMessage(DateTime dateTime, LogLevel logLevel, string category, string state, string source, string rawMessage, string message, string exception, bool exceptionIsValid)
	{
		if (Filter.DateTimeFrom != null && dateTime < Filter.DateTimeFrom)
			return false;
		if (Filter.DateTimeTo != null && dateTime > Filter.DateTimeTo)
			return false;
		if (Filter.LogLevel != null && logLevel < Filter.LogLevel)
			return false;
		if (!string.IsNullOrEmpty(Filter.Category) && !category.Contains(Filter.Category, StringComparison.OrdinalIgnoreCase))
			return false;
		if (!string.IsNullOrEmpty(Filter.State) && !state.Contains(Filter.State, StringComparison.OrdinalIgnoreCase))
			return false;
		if (!string.IsNullOrEmpty(Filter.Source) && !source.Contains(Filter.Source, StringComparison.OrdinalIgnoreCase))
			return false;
		if (!string.IsNullOrEmpty(Filter.RawMessage) && !rawMessage.Contains(Filter.RawMessage, StringComparison.OrdinalIgnoreCase))
			return false;
		if (!string.IsNullOrEmpty(Filter.Message) && !message.Contains(Filter.Message, StringComparison.OrdinalIgnoreCase))
			return false;
		if (!string.IsNullOrEmpty(Filter.Exception) && !exception.Contains(Filter.Exception, StringComparison.OrdinalIgnoreCase))
			return false;
		if (Filter.ExceptionIsValid != null && exceptionIsValid != Filter.ExceptionIsValid)
			return false;

		return true;
	}

	public void Dispose()
	{
		Subscriber?.Unregister(this);
	}
}
