@page "/"
@using LogService.Blazor.Services
@using LogService.Client.Data.Identity
@using LogService.Client.Localisation
@inject ITokenProvider TokenProvider

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@CommonLoc.Home</PageTitle>


	<AuthorizeView>
		<Authorized>
		<section class="w-100 p-4 d-flex justify-content-center pb-4">
			<div>
				<div class="form-outline">
					<h1>@CommonLoc.Welcome, @name!</h1>
				</div>
			</div>
		</section>
		<section class="w-100">
			<div>
				@if (string.IsNullOrEmpty(token))
				{
					<div class="border">
						<div class="m-2">
							<div class="border-bottom mb-3">
								<h2>Create service token</h2>
							</div>
							<div class="row mb-2">
								<div class="col-xl-1">
									Source
								</div>
								<div class="col-xl-2 mb-2">
									<InputText @bind-Value="source" class="form-control" />
								</div>
								<div class="col-xl-1">
									Valid Until
								</div>
								<div class="col-xl-2 mb-2">
									<InputDate @bind-Value="validUntil" class="form-control" />
								</div>
								<div class="col-xl-3">
									<div class="d-flex justify-content-end justify-content-xl-between">
										<button @onclick="SetServiceToken" class="btn btn-primary">
											Get Service Token
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
				else
				{
					<div class="row form-outline mb-2">
						<div>
							<label class="form-label fw-bold">Token</label>
						</div>

						<div>
							<script>
								function auto_grow(element) {
									element.style.height = "5px";
									element.style.height = (element.scrollHeight) + "px";
								}
							</script>

							<InputTextArea class="form-control" readonly type="text" @bind-Value="token" style="resize: none; overflow: hidden;" onfocus="auto_grow(this)" oninput="auto_grow(this)" />
						</div>
					</div>
				}
			</div>
		</section>
		</Authorized>
		<NotAuthorized>
			<section class="w-100 p-4 d-flex justify-content-center pb-4">
				<div>
					<div class="form-outline mb-4">
						<h1>@CommonLoc.Welcome!</h1>
						<p>@CommonLoc.RegisterOrLogin</p>
					</div>
					<div class="form-outline mb-4">
						<a href="/login" class="btn btn-primary w-100">@CommonLoc.Login</a>
					</div>
					<div class="form-outline mb-4">
						<a href="/register" class="btn btn-primary w-100">@CommonLoc.Register</a>
					</div>
				</div>
			</section>
		</NotAuthorized>
	</AuthorizeView>


@code {
	[CascadingParameter(Name = "ErrorService")]
	protected IErrorService? ErrorService { get; set; }

	private string? name;
	private string? token;
	private string source = "";
	private DateTime validUntil = DateTime.Now.AddYears(1);

	protected async Task SetServiceToken()
	{
		token = await TokenProvider.GetServiceToken(source, validUntil);
	}

	protected override async Task OnInitializedAsync()
	{
		name = "";
		ErrorService?.HideError();

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			name = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Name)?.Value;
		}

		await base.OnInitializedAsync();
	}
}